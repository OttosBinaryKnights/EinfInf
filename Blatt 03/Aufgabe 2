/*
Perfektes Mischen

Sogenanntes perfektes Mischen eines Kartenstapels mit einer geraden Anzahl von Karten funktioniert wie folgt:
Der Kartenstapel wird in der Mitte geteilt, dann werden die beiden Hälften so ineinander gemischt, dass die Karten aus den beiden Hälften genau abwechselnd im gemischten Stapel vorkommen.
Beispiel: Der ursprüngliche Stapel enthalte Zehn, Bube,Dame, König, As, Joker. Die zwei Hälften enthalten dann einerseits Zehn, Bube, Dame und andererseits König, As, Joker. Nach dem Zusammenfügen ergibt sich die gemischte Reihenfolge Zehn, König, Bube, As, Dame, Joker.

Der Einfachheit halber repräsentieren wir den Kartenstapel dabei als Feld von natürlichen Zahlen.

a) Schreiben Sie zunächst eine Methode
public static int[] interleave(int[] a1, int[] a2),
die zwei als gleich lang vorausgesetzte Felder a1 und a2 akzeptiert (muss nicht überprüft werden) und ein Feld zurückgibt, in dem die Elemente aus a1 und a2 abwechselnd vorkommen, wobei mit dem ersten Element von a1 begonnen wird. Beispiel
	int[] a1 = {1,2,3};
	int[] a2 = {4,5,6};
	int [] c = interleave(a,b); c enthält die Elemente 1,4,2,5,3,6
b) Schreiben Sie eine weitere Methode
public static int[] perfectMerge(int[] a),
die perfektes Mischen für Felder mit einer geraden Anzahl von Elementen realisiert. Dazu muss zunächst das übergebene Feld in der Mitte geteilt werden und danach interleave aufgerufen werden.
Beispiel:
	int[] a = {1,2,3,4}
perfectMerge(a) ergibt dann ein Feld mit den Elementen 1,3,2,4
c) Wird ein Kartenspiel oft genug perfekt gemischt, kehrt es in seine ursprüngliche Reihenfolge zurück. Schreiben Sie nun eine Methode
public static int mergeNumber(int n),
die eine beliebige gerade Zahl grösser Null als Größe eines Kartenstapels akzeptiert und die zurückgibt, wie oft ein Kartenstapel dieser Größe höchstens perfekt gemischt werden muss, damit er seine ursprüngliche Reihenfolge wieder annimmt (wobei mindestens einmal gemischt werden muss).
Beispiel:
	mergeNumber(52) ergibt 8

*/

public class PerfectMerge {
	public static int[] interleave(int[] a1, int[] a2){
		int[] gemischt=new int[(a1.length)*2];
		int x=0;

		for (int i=0; i<(a1.length)*2;i=i+2){
			gemischt[i]=a1[x];
			gemischt[i+1]=a2[x];
			x++;
		}
		return gemischt;

	}

	public static int[] perfectMerge(int[] a){
		int halfL=(a.length)/2;
		int[] a1=new int[halfL];
		int[] a2=new int[halfL];
		int[] combMerge= new int[a.length];
		int x=halfL;

		for (int i=0;i<halfL;i++){
			a1[i]=a[i];
			a2[i]=a[x];
			x++;
		}
		combMerge=interleave(a1, a2);
		return combMerge;
	}

	public static int mergeNumber(int n){

		int[] orgDeck=new int[n];				//Erstellung eines Arrys
		int[] secDeck=new int[n];
		Boolean check=false;
		int count=0;

		for (int i=0;i<n;i++){						//füllen der Arrays + kopieren
			orgDeck[i]=(int)(100*Math.random());
			secDeck[i]=orgDeck[i];
		}

		while (check==false){
			secDeck=perfectMerge(secDeck);			//Kopie mischen
			check=true;

			for (int i=0;i<n;i++){
				if (orgDeck[i]!=secDeck[i]) check=false;
			}
			count++;
		}
		return count;
	}

	public static void main(String[] args) {
		int[] a1={1,2,3};
		int[] a2={4,5,6};
		int[] a3={1,2,3,4,5,6};
		int[] comb=new int[(a1.length)*2];
		int count=mergeNumber(52);

		System.out.println(count);

		comb = interleave(a1, a2);
		a3 = perfectMerge(a3);


		for (int i=0; i<(a1.length)*2;i++){
			System.out.println(comb[i] + " " + a3[i]);
		}

	}

}
